In this assignment, I used an SDK called Open3D which is an open-source Python library.

For the Geodesics on Meshes-Dijkstra part, the timings have been calculated while finding the shortest path between two query points. Therefore, timing results depend also on the query points. They are increasing as the distance between the points increases. However, for the same mesh and same query points, calculating the shortest path with an array is approximately ***1.5 to 2 times slower*** than calculating the shortest path with the mean-heap. This is because calculating the shortest path with an array requires scanning all the vertices to find the minimum distance and path. Therefore, for finer meshes, calculating the shortest path using an array will be computationally much more expensive. 

For the Sampling part, we need to have at least one point to perform the FPS algorithm. Therefore, the first point is selected randomly. However, to lower the effect of the randomly selected point on sampling and not have a randomly selected point in the sample, after finding the second point using the FPS algorithm, the first point is discarded. Then, the algorithm continues until the requested number of points is acquired.

For the Patching part, the smoothness of the patch depends on the order of interpolation as well as the number of points that are used. We use linear interpolation which does not produce a smooth patch unless there are a large number of points. To increase the number of points in addition to the 4 border paths, two other paths inside the border paths are generated between the FPS points that do not have a path with each other. These points have improved the patching; nevertheless, the resulting patch was not smooth adequately. Another option was to generate points inside the 4 border paths directly. However, the paths consist of many linear segments and they are irregular in 3 dimensions. Generating points both on the surface and inside the four paths was quite challenging.